#ifndef CIJS_AST_H
#define CIJS_AST_H

#import "lexer.h"

/*
 * @file ast.h
 *
 * @brief Header file for the abstract syntax tree (AST) component of the CIJS
 * JavaScript interpreter.
 *
 * The abstract syntax tree (AST) is a tree representation of the structure of
 * the source code. It is generated by the parser component of the interpreter
 * and is used to represent the program's syntax in a hierarchical form. This
 * file defines the data structures, enumerations, and function declarations
 * needed for the AST implementation.
 */

/**
 * @enum ASTNodeType
 * @brief Represents the different types of nodes in an Abstract Syntax Tree
 * (AST).
 *
 * Each node type corresponds to a specific syntactic or semantic construct
 * in the source code being parsed. These types are used to differentiate
 * the purpose and role of each node in the tree.
 */
typedef enum {
  /**
   * @brief The root node of the AST, representing the entire source file.
   *
   * This node typically contains a list of top-level declarations or statements
   * in the source code. It acts as the entry point for traversing the AST.
   */
  NODE_SOURCE_FILE,

  /**
   * @brief Represents a variable declaration in the source code.
   *
   * This node is used for constructs such as:
   * - Variable declarations: `int x = 5;`
   * - Variable initialization: `string name = "John";`
   *
   * Typically, this node has child nodes representing:
   * - The variable's identifier (e.g., `x` or `name`)
   * - The assigned value or expression (optional, e.g., `5` or `"John"`)
   */
  NODE_VARIABLE_DECLARATION,

  /**
   * @brief Represents an identifier in the source code.
   *
   * Identifiers include variable names, function names, or any user-defined
   * symbol. This node holds the name of the identifier as a string.
   *
   * Example:
   * - For `int x = 10;`, this node represents `x`.
   */
  NODE_IDENTIFIER,

  /**
   * @brief Represents a literal value in the source code.
   *
   * Literals are fixed values such as numbers, strings, or boolean values.
   * This node holds the value of the literal as a string or specialized type
   * (e.g., integer, float).
   *
   * Examples:
   * - Numeric literals: `42`, `3.14`
   * - String literals: `"Hello, world!"`
   * - Boolean literals: `true`, `false`
   */
  NODE_LITERAL,

  /**
   * @brief Represents the end of the source file.
   *
   * This node is used as a sentinel to indicate that the parser has reached
   * the end of the input. It typically does not have any children or additional
   * data.
   */
  NODE_EOF
} ASTNodeType;

/**
 * @brief Represents an identifier in an Abstract Syntax Tree (AST).
 *
 * The `value` field stores the name of the identifier as a string (e.g.,
 * variable or function name).
 */
typedef struct {
  char *value; /**< Name of the identifier as a string. */
} ASTIdentifierNode;

/**
 * @brief Represents a literal in an Abstract Syntax Tree (AST).
 *
 * The `value` field stores the name of the literal as a string (e.g., the value
 * of a string).
 */
typedef struct {
  char *value; /**< Value of the literal as a string. */
} ASTLiteralNode;

/**
 * @brief Represents the data of a node in an Abstract Syntax Tree (AST).
 *
 * This union stores the specific data for a node, which can either be:
 * - An identifier (`ASTIdentifierNode`), such as a variable or function name.
 * - A literal (`ASTLiteralNode`), such as a number, string, or other constant
 * value.
 */
typedef union {
  ASTIdentifierNode identifier; /**< Data for an identifier node. */
  ASTLiteralNode literal;       /**< Data for a literal node. */
} ASTNodeData;

/**
 * @brief Represents a single node in an Abstract Syntax Tree (AST).
 *
 * Each node has:
 * - A type (`ASTNodeType`), indicating what kind of node it is (e.g.,
 * identifier, literal, operator, etc.).
 * - Data (`ASTNodeData`), which holds the node's specific content, like an
 * identifier or a literal.
 * - A placeholder for child nodes (`children`), which will be implemented later
 * as a dynamic array.
 */
typedef struct ASTNode {
  ASTNodeType
      type; /**< The type of the AST node (e.g., identifier, literal, etc.). */
  ASTNodeData data; /**< The content of the node (e.g., identifier name, literal
                       value). */
  // struct ASTNode **children; // TODO: Implement as a dynamic array later.
} ASTNode;

/**
 * @brief Represents an Abstract Syntax Tree (AST) for a program.
 *
 * The AST contains:
 * - A `Lexer` for tokenizing the source code (used during parsing).
 * - A `root` node, which is the top-level node of the tree and acts as the
 * entry point for the AST structure.
 */
typedef struct {
  Lexer *lexer; /**< The lexer used for tokenizing input. */
  ASTNode root; /**< The root node of the AST. */
} AST;

#endif // CIJS_AST_H
